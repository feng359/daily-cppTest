#include <cstdio>
#include <cstdlib>

//以下部分是数组的下标、指针、多维数组、指针数组、数组指针 的操作

void print(int a[], int len)
{
    for (int idx = 0; idx < len; idx++)
    {
        printf("%d ", a[idx]);
    }
    puts("");
}

void arr_ptr_test()
{

    puts("以下是二维数组部分");
    int arr[][2] = {{2, 4}, {3, 5}};
    int *p[2] = {arr[0], *(arr + 1)}; //指针数组的应用 --指针数组是一个数组，存储的元素是指针，元素是int * 说明存储的是地址（指针）
    print(p[0], 2);
    print(*(p + 1), 2);

    //操作二维数组
    //数组指针的应用 --数组指针是一个指针，其指向的是一个数组地址(可以取代数组名操作元素),指针每加一，则以里面元素为单位，此处指向的是二维数组，
    //其元素是一维数组，则指针每加一，则跳过一个数组到达下一个元素(一维数组)处，类似的如果指向的是三维数组，则元素类型就是二维数组，则指针每加一，
    //则跳过一个元素(二维数组)，到达下一个元素(二维数组)处。
    int(*ptr)[2] = arr; //数组指针的应用 --数组指针是一个指针，其指向的是一个数组地址(可以取代数组名操作元素),指针每加一，则以里面元素为单位，

    int len1 = sizeof(arr) / sizeof(arr[0]); //二维数组里面有几个元素(二维数组的对应元素是一维数组，三位数组对应的元素是二维数组)
    int len2 = sizeof(arr[0]) / sizeof(int); //二维数组里面元素(一维数组)内部有几个元素。
    for (int idx = 0; idx < len1; idx++)
    {
        for (int idy = 0; idy < len2; idy++)
        {
            printf("%d %d %d %d %d %d \n", arr[idx][idy], *(arr[idx] + idy), *(*(arr + idx) + idy),
                                           ptr[idx][idy], *(ptr[idx] + idy), *(*(ptr + idx) + idy));    
        }
    }
    puts("");

    //操作三维数组
    puts("以下是三维数组部分");
    int arr1[2][2][3] = {{{1, 2, 3}, {4, 5, 6}}, {{7, 8, 9}, {10, 11, 12}}}; //也可直接={1,2,3,4,5,6,7,8,9,10,11,12},还可省略掉元素个数arr[][2][3],编译器会自动识别。
    int len3 = sizeof(arr1) / sizeof(arr1[0]);
    int len4 = sizeof(arr1[0]) / sizeof(arr1[0][0]);
    int len5 = sizeof(arr1[0][0]) / sizeof(int);

    int(*ptr1)[2][3] = arr1; //数组指针的应用，指针每加一，则跳动一个元素(二维数组(长度为2*3=6个值))，指向下一个元素(二维数组)
    for (int i = 0; i < len3; i++)
    {
        for (int j = 0; j < len4; j++)
        {
            for (int k = 0; k < len5; k++)
            { //重点：每*一次，指针就降级退化一次，有几个下标 [] 就对应几个 *()，eg:arr1代表三维数组，对*arr1则地址退化到三维数组arr1的首元素(也就是二维数组的开始地址
              //(由于是首元素，实际上就是arr1的首地址)),*(arr1+1) 则指向三维数组第二个元素(二维数组)的首地址；*(*(arr1))接着前面，*(arr1)降级指向第一个元素，也就是第一个二维数组首地址，
              //再次*，则*(*(arr1))),表示由首元素也就是第一个二维数组首地址，退化到指向这个二维数组里面第一个元素也就是一维数组的首地址;*(*(*(arr1)))接着前面，对*(*(arr1)))再次*，
              //由于前面已经退化到一维数组，则*(*(*(arr1))) 表示取arr1首元素(二维数组)的首元素(一位数组)的首元素(一个数) --对一维数组*表示取相应的值，对一维以上的数组*则表示指针降级退化。
                printf("%d %d %d %d %d %d %d %d", arr1[i][j][k], *(arr1[i][j] + k), *(*(arr1[i] + j) + k), *(*(*(arr1 + i) + j) + k),
                                                  ptr1[i][j][k], *(ptr1[i][j] + k), *(*(ptr1[i] + j) + k), *(*(*(ptr1 + i) + j) + k));
                puts("");
            }
        }
    }
    puts("");
}

//以下部分是 指针函数、函数指针 、 函数指针数组 的代码区域

int *func1()
{

    static int val = 3; //加static防止脱离本函数域释放空间，导致出错
    int number = 4;
    val += number;
    return &val; //返回的地址必须是持久的（加static或者定义为全局变量），不可是局部的，否则一旦脱离本函数作用域，则空间释放，导致出错
}

int print(int val)
{

    return val;
}

int test(int val)
{

    return val;
}

void func_ptr_test()
{

    puts("以下是指针函数和函数指针部分");
    //指针函数的使用
    //函数名就是函数的入口地址
    int *ret = func1();
    printf("指针函数返回的值是: %d\n", *ret);

    //函数指针的使用，注意：函数指针的返回类型和参数列表必须要和传入的函数返回类型和参数列表保持一致。
    int (*fp)(int);
    fp = print;
    printf("函数指针调用函数结果值为：%d\n", fp(3));

    //函数指针数组的使用
    int (*fpArr[2])(int);

    fpArr[0] = print;
    fpArr[1] = test;
    printf("函数指针操作的两个函数print(5)和test(7)返回值分别为: %d,%d\n", fpArr[0](5), (*(fpArr + 1))(7));
}

int main()
{

    arr_ptr_test();
    func_ptr_test();

    system("pause");
    return 0;
}

/* 以下是二维数组部分
2 4
3 5
2 2 2 2 2 2
4 4 4 4 4 4
3 3 3 3 3 3
5 5 5 5 5 5

以下是三维数组部分
1 1 1 1 1 1 1 1
2 2 2 2 2 2 2 2
3 3 3 3 3 3 3 3
4 4 4 4 4 4 4 4
5 5 5 5 5 5 5 5
6 6 6 6 6 6 6 6
7 7 7 7 7 7 7 7
8 8 8 8 8 8 8 8
9 9 9 9 9 9 9 9
10 10 10 10 10 10 10 10
11 11 11 11 11 11 11 11
12 12 12 12 12 12 12 12

以下是指针函数和函数指针部分
指针函数返回的值是: 7
函数指针调用函数结果值为：3
函数指针操作的两个函数print(5)和test(7)返回值分别为: 5,7 */